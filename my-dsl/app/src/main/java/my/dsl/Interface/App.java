/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package my.dsl.Interface;
import my.dsl.API.SpreadsheetApi;
import my.dsl.Game.Game;
import my.dsl.Parser.StringGrouping;

import javafx.application.Application;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.layout.Priority;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

/*
* Class that builds the interface and interacts with multiple game instances as well as receives all error messages
*
*/
public class App extends Application {
    private static String notValidText = "/workspaces/Bbecker8-Artifact/my-dsl/app/src/main/java/my/dsl/Interface/NotValidDSL_text";
    private static String notValidPlay = "/workspaces/Bbecker8-Artifact/my-dsl/app/src/main/java/my/dsl/Interface/NotValidPlayType_text";
    private static String notValidOutcome = "/workspaces/Bbecker8-Artifact/my-dsl/app/src/main/java/my/dsl/Interface/NotValidOutcome_text";
    static Game game = new Game();
	private static ArrayList<Game> games = new ArrayList<Game>();
    public static void main(String[] args) {
        launch(args);
    }

    // Builds the interface, interacts with user commands
    @Override
    public void start(Stage primaryStage) throws Exception {
        StringGrouping group = new StringGrouping();
        SpreadsheetApi api = new SpreadsheetApi();
        games.add(game);
        if (api.deleteSheet() == 200) {

            // Create a text input box
            TextField textField = new TextField();
            // Create a label
            Label label = new Label();
            label.setWrapText(true);

            ScrollPane scrollPane = new ScrollPane(label);
            scrollPane.setFitToWidth(true);
            scrollPane.setPrefHeight(400);

            // Create a VBox to hold the text input box and label
            VBox vbox = new VBox(10);
            vbox.getChildren().addAll(textField, scrollPane);
            VBox.setVgrow(scrollPane, Priority.ALWAYS);

            textField.setPromptText("Enter a string...");
            label.setText("To get Started enter a string following the documentation\n\n"
                            +"Additional features include:\n\n" 
                            +"Start New Game: Title\n\n"
                            +"Edit Past Game: spreadsheet number\n\n");
            
            textField.setOnKeyPressed(event -> {
                if (event.getCode() == KeyCode.ENTER) {

                    // send input through to data structure
                    try {
                        if(textField.getText().contains("Start New Game:")) {
	                		game = new Game();
	                		games.add(game);
                            api.setNewGame(textField.getText().substring(("Start New Game:").length(), textField.getText().length()));
	                		textField.setText("");
                            label.setText("");
	                	} else if(textField.getText().contains("Edit Past Game:")){
	                		api.getGameSheet(Integer.parseInt(textField.getText().substring(("Edit Past Game:").length(), textField.getText().length()).trim()));
	                		game = new Game();
        	                game.setGame(games.get(Integer.parseInt(textField.getText().substring(("Edit Past Game:").length(), textField.getText().length()).trim())-1));
                            textField.setText("");
                            label.setText("");
	                	} else {
		                    group.update(textField.getText(), game);
		                    label.setText("");
		                    textField.setText("");
		                    
		                    if (api.deleteSheet() == 200 || api.deleteSheet() == 400) {
		                    	if (api.postGame(game) == 200) {
		                    		label.setText("Success");
		                    	} else {
                                    throw new Exception("Game could not Be Posted");
                                }
		                    } else {
                                throw new Exception("Sheet Could Not Be Deleted");
                            }
	                	}
                    } catch (Exception e1) {
                        if (e1.getMessage().equals("Input Format of DSL is Not Valid")) {
                            try {
                                label.setText(e1.getCause().getMessage() + getFileContent(notValidText));
                            } catch (Exception e2) {
                                e2.printStackTrace();
                            }
                        }
                        if (e1.getMessage().equals("Playtype not found")) {
                            try {
                                label.setText(e1.getCause().getMessage() + getFileContent(notValidPlay));
                            } catch (Exception e2) {
                                e2.printStackTrace();
                            }
                        }
                        if (e1.getMessage().equals("Outcome did not match")) {
                            try {
                                label.setText(e1.getCause().getMessage() + getFileContent(notValidOutcome ));
                            } catch (Exception e2) {
                                e2.printStackTrace();
                            }
                        }
                    }
                }
            });

            // Create a scene with the VBox
            Scene scene = new Scene(vbox, 500, 600);

            // Set the scene on the primary stage
            primaryStage.setScene(scene);
            primaryStage.setTitle("Domain Specific Language Interface For Football Stats");
            primaryStage.show();
        }
    }

    // grabs the contents of a file for error messaging
    public static String getFileContent(String file) throws Exception{
    	try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            String line;
            StringBuilder sb = new StringBuilder();
            while ((line = br.readLine()) != null) {
                sb.append(line);
                sb.append("\n"); // Add HTML line break tag
            }
            br.close();
            String labelText = sb.toString();

            // Set the text of the label with HTML formatting
            return labelText ;
        } catch (IOException e) {
            e.printStackTrace();
        }
		return null;
		
    }

}
